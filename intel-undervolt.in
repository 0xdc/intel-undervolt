#!/bin/bash

# Copyright (C) 2018 kitsunyan <kitsunyan@inbox.ru>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

indices=()
names=()
values=()
tdp=()
tjoffset=
error=

function apply() {
  local index="$1"
  local name="$2"
  local uv="$3"

  grep -Pxq '[0-9a-f]' <<< "$index" || {
    error=1
    echo "Invalid index: '$index'" >&2
    return 1
  }

  [ "${uv:0:1}" = '-' ] && uv="${uv:1}"
  grep -Pxq '\d+(\.\d+)?' <<< "$uv" || {
    error=1
    echo "Invalid value: '$uv'" >&2
    return 1
  }

  local value="`awk '{ printf("%x",
  and(lshift(lshift(1, 32) - ($1 * 1.024) + 0.5, 21),
  0xffe00000)) }' <<< "$uv"`"
  [ "$value" = '0' ] && value='00000000'

  grep -Pxq '[0-9a-f]{3}00000' <<< "$value" || {
    error=1
    echo "Invalid value: '$value'" >&2
    return 1
  }

  indices+=("$index")
  names+=("$name")
  values+=("0x00000000$value")
}

function tdp() {
  local short="$1"
  local long="$2"
  tdp=("`printf '%03x' $(("$short" * 8))`" "`printf '%03x' $(("$long" * 8))`")
}

function tjoffset() {
  local offset="$1"
  [ "${offset:0:1}" = '-' ] && offset="${offset:1}"

  grep -Pxq '\d+' <<< "$offset" || {
    error=1
    echo "Invalid value: '$offset'" >&2
    return 1
  }

  [ "$offset" -gt '63' ] && offset='63'
  tjoffset="`printf '0x%02x000000' "$offset"`"
}

{ source '@SYSCONFDIR@/intel-undervolt.conf' && [ -z "$error" ]; } || {
  echo 'Can not read config file.' >&2
  exit 1
}

function ioutils() {
  '@PKGLIBDIR@/ioutils' "$@"
}

function handle-apply() {
  local apply="$1"
  local success=true

  function regval() {
    echo "0x80000${2}1${1}${3: -8}"
  }

  function tomv() {
    awk '{ printf("%0.2f", and(lshift(1, 32) - rshift(strtonum($1), 21),
    0x7ff) / 1.024) }' <<< "0x${1: -8}"
  }

  for i in `seq 0 $((${#indices[@]} - 1))`; do
    local value=''
    local code

    "$apply" && {
      ioutils msr 0x150 "`regval 1 "${indices[$i]}" "${values[$i]}"`" &&
      ioutils msr 0x150 "`regval 0 "${indices[$i]}" 00000000`" &&
      value="`ioutils msr 0x150`"
      code="$?"

      [ "$code" = '0' ] && {
        [ "${value: -8}" = "${values[$i]: -8}" ] ||
        code='1'
      }
      true
    } || {
      ioutils msr 0x150 "`regval 0 "${indices[$i]}" 00000000`" &&
      value="`ioutils msr 0x150`"
      code="$?"
      true
    }

    [ "$code" = '0' ] && {
      local uv="`tomv "$value"`"
      echo "${names[$i]} (${indices[$i]}): -$uv mV"
      true
    } || {
      local op
      "$apply" && op=write || op=read
      echo "Failed to $op value for ${names[$i]} (${indices[$i]})" >&2
      success=false
      true
    }
  done

  "$success"
}

function handle-tdp() {
  local apply="$1"
  local success=true

  function towt() {
    echo $(("0x$1" / 8))
  }

  [ "${#tdp[@]}" = '2' ] && {
    echo

    local msr_limit="`ioutils msr 0x610`"
    local mchbar_limit="`ioutils mem 0xfed159a0`"

    [ -n "$msr_limit" ] && [ -n "$mchbar_limit" ] && {
      local code

      "$apply" && {
        local new_limit="${msr_limit:0:7}${tdp[0]}${msr_limit:10:5}${tdp[1]}"
        ioutils msr 0x610 "$new_limit" &&
        ioutils mem 0xfed159a0 "$new_limit" &&
        msr_limit="`ioutils msr 0x610`"
        code="$?"
        true
      } || {
        [ ! "$msr_limit" = "$mchbar_limit" ] && {
          echo "Warning: MSR and MCHBAR values are not equal" >&2
        }
        code='0'
        true
      }

      [ "$code" = '0' ] && {
        echo "Short term TDP: `towt ${msr_limit:7:3}` W"
        echo "Long term TDP: `towt ${msr_limit:15:3}` W"
        true
      } || {
        echo "Failed to write TDP values" >&2
        success=false
        true
      }
      true
    } || {
      echo "Failed to read TDP values" >&2
      success=false
      true
    }
  }

  "$success"
}

function handle-tjoffset() {
  local apply="$1"
  local success=true

  [ -n "$tjoffset" ] && {
    echo

    local apply_code=0
    "$apply" && {
      local value="`ioutils msr 0x1a2`"
      value="${value:0:10}`awk 'BEGIN { printf("%08x",
      or(and('"0x${value:10:8}"', 0xc0ffffff), '"$tjoffset"')) }'`"
      ioutils msr 0x1a2 "$value"
      apply_code="$?"
    }

    [ "$apply_code" = '0' ] && {
      local offset="`ioutils msr 0x1a2`"

      [ -n "$offset" ] && {
        offset="`awk '{ print(and(rshift(strtonum($1), 24),
        0x3f)) }' <<< "$offset"`"
        echo "Critical offset: -${offset}Â°C"
        true
      } || {
        echo "Failed to read temperature offset value" >&2
        success=false
        true
      }
      true
    } || {
      echo "Failed to write temperature offset value" >&2
      success=false
      true
    }
  }

  "$success"
}

case "$1" in
  read)
    grep -q '^msr ' /proc/modules || modprobe msr
    success=true

    handle-apply false || success=false
    handle-tdp false || success=false
    handle-tjoffset false || success=false

    "$success"
    exit $?
    ;;
  apply)
    grep -q '^msr ' /proc/modules || modprobe msr
    success=true

    handle-apply true || success=false
    handle-tdp true || success=false
    handle-tjoffset true || success=false

    "$success" && {
      echo
      echo 'Success'
      true
    }
    exit $?
    ;;
  *)
    printf '%s\n' \
    'Usage: intel-undervolt COMMAND' \
    '  read      Read and display current values' \
    '  apply     Apply values from config file' \
    >&2
    [ -z "$1" ]
    exit $?
    ;;
esac
